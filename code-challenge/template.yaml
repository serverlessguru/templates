AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template
Mappings:
  Configuration:
    DEV:
      clientId: 1234abcd
      clientSecret: 555ffaacc
    PROD:
      clientId: ccccxyz1234
      clientSecret: cchhall2134
Resources:
  LambdaToVPCDynamoDB:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal:
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations'
        - 'arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
      Policies:
        - PolicyName: KinesisAccess
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: "kinesis:*"
                Resource: "*"  
      RoleName: 'LambdaToVPCDynamoDB'
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTableForNATG:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForNATG
      SubnetId: !Ref SubnetB
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref SubnetA
  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableForNATG
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: myawesomedatabase
      Engine: aurora
      EngineMode: serverless
      MasterUsername: mydbuser
      MasterUserPassword: mydatabasepassword
      Port: 3306
      BackupRetentionPeriod: 7
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
  benefitsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: benefitsLambda/
      Handler: index.handler
      Runtime: nodejs8.10
      Description: 'benefitsLambda description'
      Timeout: 45
      Role: !GetAtt LoyaltyLambdaToVPCDynamoDB.Arn
      FunctionName: 'benefitsLambda'
      MemorySize: 3008
      Environment:
        Variables:
          client_id: !FindInMap [Configuration, !Ref Environment, clientId]
          client_secret: !FindInMap [Configuration, !Ref Environment, clientSecret]
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "benefits API"
      Description: "benefits API description"
  apiGatewayResourceBenefits:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt "apiGateway.RootResourceId"
      PathPart: benefits
  apiGatewayRootMethodBenefits:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "benefitsLambda.Arn"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      RestApiId: !Ref "apiGateway"
  apiGatewayDeploymentMethodBenefits:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethodBenefits"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: dev
  lambdaApiGatewayInvokeBenefits:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "benefitsLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/benefits"