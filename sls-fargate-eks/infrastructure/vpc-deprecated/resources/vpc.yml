Resources:
  # *** VPC resources ***
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${self:custom.base}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: !Sub '${self:custom.base}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATPrivateSubnetRouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  NATPrivateSubnetRouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  NATPrivateSubnetRouteC:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${self:custom.base}/PrivateRouteTable'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${self:custom.base}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  RouteTableAssociationPrivateA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateA
  RouteTableAssociationPrivateB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateB
  RouteTableAssociationPrivateC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateC
  RouteTableAssociationPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicA
  RouteTableAssociationPublicB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicB
  RouteTableAssociationPublicC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicC
  SubnetPrivateA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPrivateA'
      VpcId: !Ref VPC
  SubnetPrivateB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: 192.168.64.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPrivateB'
      VpcId: !Ref VPC
  SubnetPrivateC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}c
      CidrBlock: 192.168.82.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPrivateC'
      VpcId: !Ref VPC
  SubnetPublicA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: 192.168.32.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPublicA'
      VpcId: !Ref VPC
  SubnetPublicB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: 192.168.0.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPublicB'
      VpcId: !Ref VPC
  SubnetPublicC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}c
      CidrBlock: 192.168.16.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${self:custom.base}/SubnetPublicC'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${self:custom.base}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  FeatureNATMode:
    Value: Single
  SubnetsPrivate:
    Export:
      Name: !Sub '${self:custom.base}::SubnetsPrivate'
    Value: !Join 
      - ','
      - - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
        - !Ref SubnetPrivateC
  SubnetsPublic:
    Export:
      Name: !Sub '${self:custom.base}::SubnetsPublic'
    Value: !Join 
      - ','
      - - !Ref SubnetPublicA
        - !Ref SubnetPublicB
        - !Ref SubnetPublicC
  VPC:
    Export:
      Name: !Sub '${self:custom.base}::VPC'
    Value: !Ref VPC